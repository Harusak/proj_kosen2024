"0","# 異常値を含む行を参加者IDごとにカウントする"
"0","countOutlier <- dfRAW |>"
"0","  # 異常値（outlier 列が 1 である行）をフィルタリングする"
"0","  dplyr::filter(outlier == 1) |>"
"0",""
"0","  # 実験ID（expID）とサブID（subID）でグループ化する"
"0","  group_by(expID, subID) |>"
"0",""
"0","  # 各グループごとに異常値が含まれる試行の数を集計し、新しい列 outlierTrials に保存する"
"0","  summarise("
"0","    outlierTrials = n(),"
"0","    .groups = 'drop') |>"
"0",""
"0","  # 試行の総数（80）で割り、異常値が占める割合を計算し、Percent 列に保存する"
"0","  mutate(Percent = outlierTrials / 80) |>"
"0",""
"0","  # 異常値が多い順に並べ替える"
"0","  arrange(desc(outlierTrials))"
"0",""
"0","# 異常値のカウント結果を上位数行表示する"
"0","# head(countOutlier)"
"0",""
"0","# フラグが 0 である行を、実験IDとサブIDごとにカウントする"
"0","countFlag <- dfRAW |>"
"0","  # フラグが 1 である行（flag 列が 1 の行）をフィルタリングする"
"0","  dplyr::filter(flag == 1) |>"
"0","  # 実験ID（expID）とサブID（subID）でグループ化する"
"0","  group_by(expID, subID) |>"
"0","  # 各グループごとにフラグが 0 である試行の数を集計し、新しい列 unusableTrials に保存する"
"0","  summarise(unusableTrials = n(), .groups = 'drop') |>"
"0","  # 試行の総数（80）で割り、フラグが 0 である試行が占める割合を計算し、Percent 列に保存する"
"0","  mutate(Percent = unusableTrials / 80) |>"
"0","  # フラグが 0 である試行が多い順に並べ替える"
"0","  arrange(desc(unusableTrials))"
"0",""
"0","# フラグが 0 である試行のカウント結果を上位数行表示する"
"0","# head(countFlag)"
"0",""
"0","subID_flagged_top <- head(countFlag$subID, 5)"
"0","subID_ol_top <- head(countOutlier$subID, 5)"
